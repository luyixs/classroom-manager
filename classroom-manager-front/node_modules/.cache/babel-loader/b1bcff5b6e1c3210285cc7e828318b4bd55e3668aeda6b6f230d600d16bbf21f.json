{"ast":null,"code":"var webSocket;\nlet webSocketUrl = 'ws://localhost:8080/signin/';\nlet state = {\n  SIGNED: '已签',\n  NOTSIGNED: '未签'\n};\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport SignInStateList from './SignInStateList.vue';\nexport default {\n  components: {\n    SignInStateList\n  },\n  props: {},\n  data() {\n    return {\n      loginUser: null,\n      stuDialogVisible: false,\n      inputCode: '',\n      userSignState: {\n        user: null,\n        code: '',\n        state: ''\n      },\n      myLectures: [],\n      signInStateListVisible: false,\n      isSigned: false\n    };\n  },\n  watch: {\n    loginUser(newVal, oldVal) {\n      this.signInStateListVisible = newVal.role == 'teacher';\n    }\n  },\n  computed: {},\n  methods: {\n    initData() {\n      if (this.loginUser == null) {\n        this.$message(\"请先登录后在使用该功能\");\n        return;\n      }\n      if ('WebSocket' in window) {\n        webSocketUrl = webSocketUrl + this.loginUser.id;\n        if (webSocket != null) {\n          webSocket.close();\n          webSocket = null;\n        }\n        webSocket = new WebSocket(webSocketUrl);\n      } else {\n        console.log(\"Not support WebSocket\");\n      }\n      webSocket.onopen = function () {\n        console.log(\"onOpen\");\n      };\n      webSocket.onclose = function () {\n        webSocket.close();\n        console.log('close');\n      };\n      webSocket.onmessage = e => {\n        // console.log('收到消息：' + e.data);\n        let data = JSON.parse(e.data);\n        console.log(data);\n        if (data.hasOwnProperty('userSignStates')) {\n          this.$bus.$emit('updateSignState', data.userSignStates);\n        }\n      };\n      webSocket.onerror = function () {\n        console.log('onError');\n      };\n    },\n    handleShow() {\n      if (this.loginUser == null) {\n        this.$message('请先登录后使用该功能！');\n        return;\n      } else if (this.loginUser.role == \"student\") {\n        this.$message('你的身份为学生，不能发起签到！');\n        return;\n      }\n      this.$bus.$emit('showSignInDialog', this.myLectures);\n    },\n    //输入签到码对话框\n    handleShowSign() {\n      if (this.loginUser == null) {\n        this.$message('请先登录后使用该功能！');\n        return;\n      } else if (this.loginUser.role == \"teacher\") {\n        this.$message('你的身份为教师，你只需要发起签到');\n        return;\n      }\n      this.stuDialogVisible = true;\n    },\n    handleClose(done) {\n      this.$confirm('确认关闭？').then(_ => {\n        done();\n      }).catch(_ => {});\n    },\n    handleSigned() {\n      this.userSignState.user = this.loginUser;\n      this.userSignState.code = this.inputCode.trim();\n      this.userSignState.state = state.SIGNED;\n      axios({\n        method: 'POST',\n        url: '/signin/signed',\n        data: this.userSignState\n      }).then(rsp => {\n        if (rsp.data.success) {\n          this.$message({\n            message: '签到成功！',\n            type: 'success'\n          });\n          this.stuDialogVisible = false;\n          this.isSigned = true;\n        }\n      }, err => {\n        this.$message.error(e.message);\n      }).finally({});\n    },\n    //获取我的授课列表\n    getLectureList(condition) {\n      if (this.loginUser != null && this.loginUser.role == \"teacher\") {\n        console.log('getLectureList run...');\n        axios({\n          method: 'GET',\n          url: '/lecture/list',\n          params: {\n            q: condition\n          }\n        }).then(rsp => {\n          console.log(rsp.data);\n          if (rsp.data.success) this.myLectures = rsp.data.data;\n        }, err => {\n          this.$message.error(err.message);\n        });\n      }\n    },\n    getSignState() {\n      if (this.loginUser != null && this.loginUser.role == 'teacher') {\n        axios({\n          method: 'GET',\n          url: '/signin/state',\n          params: {\n            uid: this.loginUser.id\n          }\n        }).then(rsp => {\n          if (rsp.data.success) {\n            console.log(rsp.data);\n            this.$bus.$emit('handleSetSignCode', rsp.data.data);\n          }\n        }, err => {\n          this.$message.error(err.message);\n        });\n      }\n    },\n    setLoginUser() {\n      this.loginUser = this.getCookie('loginUser');\n    },\n    setCookie(key, value) {\n      Cookies.set(key, JSON.stringify(value));\n    },\n    getCookie(key) {\n      let cookieValue = Cookies.get(key);\n      if (cookieValue == undefined) {\n        return null; //cookie未定义\n      }\n\n      return JSON.parse(Cookies.get(key));\n    }\n  },\n  created() {},\n  mounted() {\n    this.setLoginUser();\n    this.initData();\n    this.getLectureList('');\n    this.getSignState();\n  }\n};","map":{"version":3,"mappings":"AAoDA;AACA;AACA;EAAAA;EAAAC;AAAA;AAGA;AACA;AACA;AAGA;EACAC;IAAAC;EAAA;EACAC;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;IAEA;EACA;EACAC;IACAV;MACA;IACA;EACA;EACAW;EACAC;IACAC;MACA;QACA;QACA;MACA;MACA;QACAC;QACA;UACAC;UACAA;QACA;QACAA;MACA;QACAC;MACA;MACAD;QACAC;MACA;MACAD;QACAA;QACAC;MACA;MAEAD;QACA;QACA;QACAC;QACA;UACA;QACA;MAEA;MACAD;QACAC;MACA;IACA;IACAC;MACA;QACA;QACA;MACA;QACA;QACA;MACA;MACA;IACA;IACA;IACAC;MACA;QACA;QACA;MAEA;QACA;QACA;MACA;MAEA;IACA;IACAC;MACA;QACAC;MACA,eACA;IACA;IACAC;MACA;MACA;MACA;MACAC;QAAAC;QAAAC;QAAAzB;MAAA;QACA;UACA;YAAA0B;YAAAC;UAAA;UACA;UACA;QACA;MACA;QACA;MACA;IAEA;IACA;IACAC;MACA;QACAX;QACAM;UAAAC;UAAAC;UAAAI;YAAAC;UAAA;QAAA;UACAb;UACA;QACA;UACA;QACA;MACA;IAEA;IACAc;MACA;QACAR;UAAAC;UAAAC;UAAAI;YAAAG;UAAA;QAAA;UACA;YACAf;YACA;UACA;QACA;UAAA;QAAA;MACA;IACA;IAKAgB;MACA;IACA;IACAC;MACAC;IACA;IACAC;MACA;MACA;QACA;MACA;;MACA;IACA;EAGA;EACAC;EACAC;IACA;IACA;IACA;IACA;EACA;AACA","names":["SIGNED","NOTSIGNED","components","SignInStateList","props","data","loginUser","stuDialogVisible","inputCode","userSignState","user","code","state","myLectures","signInStateListVisible","isSigned","watch","computed","methods","initData","webSocketUrl","webSocket","console","handleShow","handleShowSign","handleClose","done","handleSigned","axios","method","url","message","type","getLectureList","params","q","getSignState","uid","setLoginUser","setCookie","Cookies","getCookie","created","mounted"],"sourceRoot":"src/components/SignIn","sources":["SignIn.vue"],"sourcesContent":["<template>\r\n  <el-main>\r\n    <h3>签到</h3>\r\n    <div class=\"sign-container\">\r\n      <el-row>\r\n        <el-steps :active=\"3\" simple class=\"el-steps\">\r\n          <el-step title=\"教师发起签到\" icon=\"el-icon-plus\"></el-step>\r\n          <el-step title=\"学生签到\" icon=\"el-icon-s-claim\"></el-step>\r\n          <el-step title=\"签到完成\" icon=\"el-icon-finished\"></el-step>\r\n        </el-steps>\r\n      </el-row>\r\n      <br>\r\n      <el-row>\r\n        <el-tooltip class=\"item\" effect=\"dark\" content=\"只有教师才可以发起签到\" placement=\"top-start\">\r\n          <el-button circle icon=\"el-icon-plus\" @click=\"handleShow\"></el-button>\r\n        </el-tooltip>\r\n\r\n        <el-tooltip class=\"item\" effect=\"dark\" content=\"学生签到\" placement=\"top\">\r\n          <el-button round icon=\"el-icon-s-claim\" @click=\"handleShowSign\">签到</el-button>\r\n        </el-tooltip>\r\n      </el-row>\r\n\r\n\r\n      <SignInStateList v-if=\"signInStateListVisible\"></SignInStateList>\r\n\r\n      <el-result v-if=\"isSigned\" icon=\"success\" title=\"签到成功\" subTitle=\"您已签到成功\">\r\n        <template slot=\"extra\">\r\n        </template>\r\n      </el-result>\r\n\r\n\r\n\r\n\r\n      <el-dialog title=\"输入签到码\" :visible.sync=\"stuDialogVisible\" width=\"500px\" :before-close=\"handleClose\">\r\n        <el-input v-model=\"inputCode\"></el-input>\r\n        <div class=\"btn-box\">\r\n          <el-button @click=\"stuDialogVisible = false\">取 消</el-button>\r\n          <el-button @click=\"handleSigned\">确定</el-button>\r\n        </div>\r\n      </el-dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  </el-main>\r\n</template>\r\n\r\n<script>\r\n\r\nvar webSocket;\r\nlet webSocketUrl = 'ws://localhost:8080/signin/'\r\nlet state = { SIGNED: '已签', NOTSIGNED: '未签' }\r\n\r\n\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios';\r\nimport SignInStateList from './SignInStateList.vue';\r\n\r\n\r\nexport default {\r\n  components: { SignInStateList },\r\n  props: {},\r\n  data() {\r\n    return {\r\n      loginUser: null,\r\n      stuDialogVisible: false,\r\n      inputCode: '',\r\n      userSignState: {\r\n        user: null,\r\n        code: '',\r\n        state: '',\r\n      },\r\n      myLectures: [],\r\n      signInStateListVisible: false,\r\n      isSigned: false\r\n\r\n    };\r\n  },\r\n  watch: {\r\n    loginUser(newVal, oldVal) {\r\n      this.signInStateListVisible = newVal.role == 'teacher'\r\n    }\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    initData() {\r\n      if (this.loginUser == null) {\r\n        this.$message(\"请先登录后在使用该功能\")\r\n        return\r\n      }\r\n      if ('WebSocket' in window) {\r\n        webSocketUrl = webSocketUrl + this.loginUser.id\r\n        if (webSocket != null) {\r\n          webSocket.close();\r\n          webSocket = null;\r\n        }\r\n        webSocket = new WebSocket(webSocketUrl)\r\n      } else {\r\n        console.log(\"Not support WebSocket\");\r\n      }\r\n      webSocket.onopen = function () {\r\n        console.log(\"onOpen\");\r\n      }\r\n      webSocket.onclose = function () {\r\n        webSocket.close()\r\n        console.log('close');\r\n      };\r\n\r\n      webSocket.onmessage = (e) => {\r\n        // console.log('收到消息：' + e.data);\r\n        let data = JSON.parse(e.data)\r\n        console.log(data)\r\n        if (data.hasOwnProperty('userSignStates')) {\r\n          this.$bus.$emit('updateSignState', data.userSignStates)\r\n        }\r\n\r\n      }\r\n      webSocket.onerror = function () {\r\n        console.log('onError');\r\n      }\r\n    },\r\n    handleShow() {\r\n      if (this.loginUser == null) {\r\n        this.$message('请先登录后使用该功能！')\r\n        return;\r\n      } else if (this.loginUser.role == \"student\") {\r\n        this.$message('你的身份为学生，不能发起签到！')\r\n        return;\r\n      }\r\n      this.$bus.$emit('showSignInDialog', this.myLectures)\r\n    },\r\n    //输入签到码对话框\r\n    handleShowSign() {\r\n      if (this.loginUser == null) {\r\n        this.$message('请先登录后使用该功能！')\r\n        return;\r\n\r\n      } else if (this.loginUser.role == \"teacher\") {\r\n        this.$message('你的身份为教师，你只需要发起签到')\r\n        return;\r\n      }\r\n\r\n      this.stuDialogVisible = true\r\n    },\r\n    handleClose(done) {\r\n      this.$confirm('确认关闭？').then(_ => {\r\n        done();\r\n      }).catch(_ => {\r\n      });\r\n    },\r\n    handleSigned() {\r\n      this.userSignState.user = this.loginUser\r\n      this.userSignState.code = this.inputCode.trim()\r\n      this.userSignState.state = state.SIGNED;\r\n      axios({ method: 'POST', url: '/signin/signed', data: this.userSignState }).then(rsp => {\r\n        if (rsp.data.success) {\r\n          this.$message({ message: '签到成功！', type: 'success' })\r\n          this.stuDialogVisible = false\r\n          this.isSigned = true\r\n        }\r\n      }, err => {\r\n        this.$message.error(e.message)\r\n      }).finally({})\r\n\r\n    },\r\n    //获取我的授课列表\r\n    getLectureList(condition) {\r\n      if (this.loginUser != null && this.loginUser.role == \"teacher\") {\r\n        console.log('getLectureList run...')\r\n        axios({ method: 'GET', url: '/lecture/list', params: { q: condition } }).then(rsp => {\r\n          console.log(rsp.data)\r\n          if (rsp.data.success) this.myLectures = rsp.data.data\r\n        }, err => {\r\n          this.$message.error(err.message)\r\n        })\r\n      }\r\n\r\n    },\r\n    getSignState() {\r\n      if (this.loginUser != null && this.loginUser.role == 'teacher') {\r\n        axios({ method: 'GET', url: '/signin/state', params: { uid: this.loginUser.id } }).then(rsp => {\r\n          if (rsp.data.success) {\r\n            console.log(rsp.data)\r\n            this.$bus.$emit('handleSetSignCode', rsp.data.data)\r\n          }\r\n        }, err => { this.$message.error(err.message) })\r\n      }\r\n    },\r\n\r\n\r\n\r\n\r\n    setLoginUser() {\r\n      this.loginUser = this.getCookie('loginUser')\r\n    },\r\n    setCookie(key, value) {\r\n      Cookies.set(key, JSON.stringify(value))\r\n    },\r\n    getCookie(key) {\r\n      let cookieValue = Cookies.get(key)\r\n      if (cookieValue == undefined) {\r\n        return null //cookie未定义\r\n      }\r\n      return JSON.parse(Cookies.get(key))\r\n    },\r\n\r\n\r\n  },\r\n  created() { },\r\n  mounted() {\r\n    this.setLoginUser()\r\n    this.initData()\r\n    this.getLectureList('')\r\n    this.getSignState()\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n/* 步骤条 */\r\n.el-steps {\r\n  background-color: white;\r\n}\r\n\r\n.sign-container {\r\n  /* height: 1000px; */\r\n  border: 1px solid rgb(255, 255, 255);\r\n}\r\n\r\n.btn-box {\r\n  /* border: 1px solid red; */\r\n  display: flex;\r\n  justify-content: end;\r\n  margin-top: 20px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}