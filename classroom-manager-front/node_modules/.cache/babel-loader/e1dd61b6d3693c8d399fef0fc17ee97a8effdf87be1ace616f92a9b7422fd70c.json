{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\n// import key from '../assets/js/key'\nexport default {\n  components: {},\n  props: [],\n  data() {\n    return {\n      loginUser: null,\n      roleOptions: [{\n        value: 'student',\n        label: '学生'\n      }, {\n        value: 'teacher',\n        label: '教师'\n      }, {\n        value: 'admin',\n        label: '管理员'\n      }],\n      formData: {\n        id: '',\n        name: '',\n        pwd: '',\n        className: '',\n        academy: '',\n        major: '',\n        tel: '',\n        email: '',\n        role: 'student'\n      }\n    };\n  },\n  watch: {},\n  computed: {},\n  methods: {\n    handleLogin() {\n      // console.log(this.formData);\n      axios({\n        method: 'POST',\n        url: '/login/',\n        data: {\n          id: this.formData.id,\n          pwd: this.formData.pwd,\n          role: this.formData.role\n        }\n      }).then(rsp => {\n        // console.log(rsp.data)\n        if (rsp.data.success) {\n          this.$message({\n            message: '登录成功！',\n            type: 'success'\n          });\n          this.setCookie('loginUser', rsp.data.data); //设置后端返回的登录用户信息cookie\n          this.setLoginUser(); //设置data中的用户信息\n          this.$bus.$emit('setLoginUser'); //通知Avatar设置用户信息\n\n          //   //重新获取session和设置cookie\n          //  this.getSessionLoginUser()\n          //跳转页面\n          // this.$bus.$emit('redirectURL', '/index')\n        } else {\n          this.$message(\"登录失败，请检查用户名和密码是否正确\");\n        }\n      }, err => {\n        this.$message.error(err.message);\n      });\n    },\n    handleRegister() {\n      this.redirectURL('/login');\n    },\n    redirectURL(url) {\n      console.log(window.location.origin + url);\n      window.location.href = window.location.origin + url;\n    },\n    setLoginUser() {\n      this.loginUser = this.getCookie('loginUser');\n    },\n    setCookie(key, value) {\n      Cookies.set(key, JSON.stringify(value));\n    },\n    getCookie(key) {\n      // console.log('IndexLogin getCookie 被调用')\n      let cookieValue = Cookies.get(key);\n      if (cookieValue == undefined) {\n        return null; //cookie未定义\n      }\n\n      return JSON.parse(Cookies.get(key));\n    },\n    //获取后台服务器session 并且更新前台服务器cookie\n    getSessionLoginUser() {\n      console.log('IndexLogin getSessionLoginUser run...');\n      axios({\n        method: 'GET',\n        url: '/session/loginUser'\n      }).then(rsp => {\n        this.loginUser = rsp.data;\n        console.log(rsp.data);\n        this.setCookie('loginUser', this.loginUser);\n      }, err => {\n        this.$message.error(err.message);\n      }).finally(() => {\n        console.log('loginUser:' + this.getCookie('loginUser'));\n      });\n    }\n  },\n  created() {},\n  mounted() {\n    this.setLoginUser();\n    // this.$bus.$on('setLoginUser',this.setLoginUser)\n  }\n};","map":{"version":3,"mappings":"AAyBA;AACA;AACA;AACA;EACAA;EACAC;EACAC;IACA;MACAC;MACAC;QAAAC;QAAAC;MAAA;QAAAD;QAAAC;MAAA;QACAD;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;EACAC;EACAC;IAEAC;MACA;MACAC;QACAC;QACAC;QACArB;UACAM;UACAE;UACAM;QACA;MACA;QACA;QACA;UACA;YAAAQ;YAAAC;UAAA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;QACA;UACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;IACA;IAEAC;MACAC;MACAC;IACA;IAGAC;MACA;IACA;IAEAC;MACAC;IACA;IACAC;MACA;MACA;MACA;QACA;MACA;;MACA;IACA;IACA;IACAC;MACAN;MACAP;QAAAC;QAAAC;MAAA;QACA;QACAK;QACA;MACA;QAAA;MAAA;QAAAA;MAAA;IACA;EAIA;EACAO;EACAC;IACA;IACA;EACA;AACA","names":["components","props","data","loginUser","roleOptions","value","label","formData","id","name","pwd","className","academy","major","tel","email","role","watch","computed","methods","handleLogin","axios","method","url","message","type","handleRegister","redirectURL","console","window","setLoginUser","setCookie","Cookies","getCookie","getSessionLoginUser","created","mounted"],"sourceRoot":"src/components","sources":["IndexLogin.vue"],"sourcesContent":["<template>\r\n  <!-- 登录盒子 -->\r\n  <el-card class=\"login-box\" v-if=\"null == loginUser\">\r\n    <el-form ref=\"form\" label-width=\"50px\" :model=\"formData\" action=\"http://localhost:8080\" method=\"post\">\r\n      <el-form-item label=\"ID:\" size=\"medium\">\r\n        <el-input placeholder=\"请输入学号/教工号\" v-model=\"formData.id\" clearable></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码:\" size=\"medium\">\r\n        <el-input placeholder=\"请输入密码\" v-model=\"formData.pwd\" show-password></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"身份:\">\r\n        <el-select v-model=\"formData.role\" placeholder=\"请选择\" size=\"mini\" style=\"width: 100px;\">\r\n          <el-option v-for=\"item in roleOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button  @click=\"handleLogin\">登录</el-button>\r\n        <el-button  @click=\"handleRegister\">注册</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\n// import key from '../assets/js/key'\r\nexport default {\r\n  components: {},\r\n  props: [],\r\n  data() {\r\n    return {\r\n      loginUser: null,\r\n      roleOptions: [{ value: 'student', label: '学生' }, { value: 'teacher', label: '教师' }, {\r\n        value: 'admin',\r\n        label: '管理员'\r\n      }],\r\n      formData: {\r\n        id: '',\r\n        name: '',\r\n        pwd: '',\r\n        className: '',\r\n        academy: '',\r\n        major: '',\r\n        tel: '',\r\n        email: '',\r\n        role: 'student'\r\n      },\r\n    };\r\n  },\r\n  watch: {},\r\n  computed: {},\r\n  methods: {\r\n\r\n    handleLogin() {\r\n      // console.log(this.formData);\r\n      axios({\r\n        method: 'POST',\r\n        url: '/login/',\r\n        data: {\r\n          id: this.formData.id,\r\n          pwd: this.formData.pwd,\r\n          role: this.formData.role\r\n        }\r\n      }).then(rsp => {\r\n        // console.log(rsp.data)\r\n        if (rsp.data.success) {\r\n          this.$message({ message: '登录成功！', type: 'success' })\r\n          this.setCookie('loginUser',rsp.data.data) //设置后端返回的登录用户信息cookie\r\n          this.setLoginUser()   //设置data中的用户信息\r\n          this.$bus.$emit('setLoginUser') //通知Avatar设置用户信息\r\n          \r\n          //   //重新获取session和设置cookie\r\n          //  this.getSessionLoginUser()\r\n          //跳转页面\r\n          // this.$bus.$emit('redirectURL', '/index')\r\n        } else {\r\n          this.$message(\"登录失败，请检查用户名和密码是否正确\")\r\n        }\r\n      }, err => {\r\n        this.$message.error(err.message)\r\n      })\r\n    },\r\n    handleRegister() {\r\n      this.redirectURL('/login')\r\n    },\r\n\r\n    redirectURL(url) {\r\n      console.log(window.location.origin + url)\r\n      window.location.href = window.location.origin + url;\r\n    },\r\n\r\n\r\n    setLoginUser() {\r\n      this.loginUser = this.getCookie('loginUser')\r\n    },\r\n\r\n    setCookie(key, value) {\r\n      Cookies.set(key, JSON.stringify(value))\r\n    },\r\n    getCookie(key) {\r\n      // console.log('IndexLogin getCookie 被调用')\r\n      let cookieValue = Cookies.get(key)\r\n      if (cookieValue == undefined) {\r\n        return null //cookie未定义\r\n      }\r\n      return JSON.parse(Cookies.get(key))\r\n    },\r\n    //获取后台服务器session 并且更新前台服务器cookie\r\n    getSessionLoginUser() {\r\n      console.log('IndexLogin getSessionLoginUser run...');\r\n      axios({ method: 'GET', url: '/session/loginUser' }).then(rsp => {\r\n        this.loginUser = rsp.data\r\n        console.log(rsp.data);\r\n        this.setCookie('loginUser', this.loginUser)\r\n      }, err => { this.$message.error(err.message) }).finally(() => { console.log('loginUser:' + this.getCookie('loginUser')) })\r\n    },\r\n\r\n\r\n\r\n  },\r\n  created() { },\r\n  mounted() {\r\n    this.setLoginUser()\r\n    // this.$bus.$on('setLoginUser',this.setLoginUser)\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}