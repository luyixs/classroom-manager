{"ast":null,"code":"import { mavonEditor } from 'mavon-editor';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport nanoid from 'nanoid';\nimport { customAlphabet } from 'nanoid';\nexport default {\n  components: {},\n  props: {},\n  data() {\n    return {\n      loginUser: null,\n      note: {\n        nId: '',\n        uId: '',\n        title: '',\n        content: '',\n        tag: '',\n        editTime: '',\n        isPublic: false\n      },\n      noteTags: [],\n      contentHTML: '',\n      tagOptions: [{\n        value: 'Vue',\n        label: 'Vue'\n      }, {\n        value: 'Spring Boot',\n        label: 'Spring Boot'\n      }, {\n        value: 'Java',\n        label: 'Java'\n      }]\n    };\n  },\n  watch: {\n    noteTags: {\n      handler(newVal, oldVal) {\n        this.note.tag = JSON.stringify(newVal);\n      },\n      immediate: true\n    }\n  },\n  computed: {},\n  methods: {\n    handleSave(v) {\n      this.pushNote(this.note.isPublic);\n      console.log(v);\n    },\n    handlePublish() {\n      this.pushNote(true);\n      this.$bus.$emit('getNotes');\n      this.$bus.$emit('getMyNotes');\n      console.log('publish');\n    },\n    handleSetNote(n) {\n      console.log(n);\n      // n.tag = JSON.stringify(n.tag)\n\n      this.noteTags = n.tag;\n      this.note.nId = n.nId;\n      this.note.uId = n.uId;\n      this.note.title = n.title;\n      this.note.content = n.content;\n      this.note.editTime = n.editTime;\n      this.note.isPublic = n.isPublic;\n\n      //[BUG] [Vue warn]: Duplicate keys detected: '\"'. This may cause an update error.  found in  ---> <NoteList> at .\n      //有错，但是能运行???\n      // this.noteTags = n.tag\n    },\n\n    pushNote(isPublic = false) {\n      console.log(isPublic);\n      this.note.uId = this.loginUser.id;\n      let date = new Date();\n      this.note.editTime = date.toLocaleString();\n      this.note.isPublic = isPublic;\n      this.note.tag = JSON.stringify(this.noteTags);\n      axios({\n        method: 'POST',\n        url: '/note/push',\n        data: this.note\n      }).then(rsp => {\n        if (rsp.data.success) {\n          console.log(rsp.data.data);\n          this.$message({\n            message: '保存成功',\n            type: 'success'\n          });\n          //收起该组件\n          this.$bus.$emit('handleSetEditorVisible', false);\n          this.$bus.$emit('getNotes');\n          this.$bus.$emit('getMyNotes');\n        }\n      }, err => {\n        this.$message.error(err.message);\n      }).finally(() => {\n        // this.note.tag = \n      });\n    },\n    generateNoteId() {\n      const nanoid = customAlphabet('0123456789', 6); //挂载时随机生成笔记编号\n      this.note.nId = nanoid();\n    },\n    setLoginUser() {\n      this.loginUser = this.getCookie('loginUser');\n    },\n    setCookie(key, value) {\n      Cookies.set(key, JSON.stringify(value));\n    },\n    getCookie(key) {\n      let cookieValue = Cookies.get(key);\n      if (cookieValue == undefined) {\n        return null; //cookie未定义\n      }\n\n      return JSON.parse(Cookies.get(key));\n    }\n  },\n  created() {},\n  mounted() {\n    this.setLoginUser();\n    this.generateNoteId();\n    this.note.tag = '';\n    this.$bus.$on('handleSetNote', this.handleSetNote);\n    // console.log(this.note);\n    // const markdownIt = mavonEditor.getMarkdownIt()\n    // markdownIt.set({ break: false })\n  },\n\n  beforeDestroy() {\n    this.$bus.$off('handleSetNote');\n  }\n};","map":{"version":3,"mappings":"AAmCA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;EACAC;IACA;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;IACA;EACA;EACAC;IACAL;MACAM;QACA;MACA;MACAC;IACA;EACA;EACAC,WACA;EACAC;IACAC;MACA;MACAC;IAEA;IACAC;MACA;MACA;MACA;MACAD;IACA;IACAE;MACAF;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACA;;IAEAG;MACAH;MACA;MACA;MACA;MACA;MACA;MACAI;QAAAC;QAAAC;QAAA3B;MAAA;QACA;UACAqB;UACA;YAAAO;YAAAC;UAAA;UACA;UACA;UACA;UACA;QAEA;MACA;QAAA;MAAA;QACA;MAAA,CACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;IACA;IACAC;MACAC;IACA;IACAC;MACA;MACA;QACA;MACA;;MACA;IACA;EAEA;EACAC;EACAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEA;;EACAC;IACA;EACA;AACA","names":["components","props","data","loginUser","note","nId","uId","title","content","tag","editTime","isPublic","noteTags","contentHTML","tagOptions","value","label","watch","handler","immediate","computed","methods","handleSave","console","handlePublish","handleSetNote","pushNote","axios","method","url","message","type","generateNoteId","setLoginUser","setCookie","Cookies","getCookie","created","mounted","beforeDestroy"],"sourceRoot":"src/components/Note","sources":["EditNote.vue"],"sourcesContent":["<template>\r\n  <div class=\"\">\r\n    <div class=\"md-container\">\r\n      <div>\r\n        <el-input placeholder=\"请输入标题\" v-model=\"note.title\" size=\"mini\">\r\n          <template slot=\"prepend\">标题</template>\r\n        </el-input>\r\n      </div>\r\n      <br>\r\n      <div>\r\n        标签：<el-select v-model=\"noteTags\" class=\"select-tag\" size=\"mini\" multiple filterable allow-create\r\n          default-first-option placeholder=\"请选择文章标签\">\r\n          <el-option v-for=\"item in tagOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\r\n        </el-select>\r\n      </div>\r\n      <br>\r\n\r\n      <mavon-editor class=\"md\" v-model=\"note.content\" @save=\"handleSave\">\r\n        <!-- 左工具栏后加入自定义按钮  -->\r\n        <template slot=\"left-toolbar-after\">\r\n          <el-button round @click=\"handlePublish\" size=\"mini\">发布</el-button>\r\n        </template>\r\n      </mavon-editor>\r\n      <el-divider></el-divider>\r\n      <!-- 回显 方式一 -->\r\n      <!-- <mavon-editor v-model=\"note.content\" navigation defaultOpen=\"preview\" :toolbarsFlag=\"false\" :editable=\"false\"\r\n      :subfield=\"false\"></mavon-editor> -->\r\n      <!-- 回显 方式二 -->\r\n      <!-- <mavon-editor v-html=\"contentHTML\"></mavon-editor> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { mavonEditor } from 'mavon-editor'\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie'\r\nimport nanoid from 'nanoid';\r\nimport { customAlphabet } from 'nanoid'\r\n\r\nexport default {\r\n  components: {},\r\n  props: {},\r\n  data() {\r\n    return {\r\n      loginUser: null,\r\n      note: {\r\n        nId: '',\r\n        uId: '',\r\n        title: '',\r\n        content: '',\r\n        tag: '',\r\n        editTime: '',\r\n        isPublic: false\r\n      },\r\n      noteTags: [],\r\n      contentHTML: '',\r\n      tagOptions: [{\r\n        value: 'Vue',\r\n        label: 'Vue'\r\n      }, {\r\n        value: 'Spring Boot',\r\n        label: 'Spring Boot'\r\n      }, {\r\n        value: 'Java',\r\n        label: 'Java'\r\n      }],\r\n    };\r\n  },\r\n  watch: {\r\n    noteTags: {\r\n      handler(newVal, oldVal) {\r\n        this.note.tag = JSON.stringify(newVal)\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  methods: {\r\n    handleSave(v) {\r\n      this.pushNote(this.note.isPublic)\r\n      console.log(v)\r\n\r\n    },\r\n    handlePublish() {\r\n      this.pushNote(true)\r\n      this.$bus.$emit('getNotes');\r\n      this.$bus.$emit('getMyNotes')\r\n      console.log('publish')\r\n    },\r\n    handleSetNote(n) {\r\n      console.log(n)\r\n      // n.tag = JSON.stringify(n.tag)\r\n\r\n      this.noteTags = n.tag\r\n      this.note.nId = n.nId;\r\n      this.note.uId = n.uId;\r\n      this.note.title = n.title;\r\n      this.note.content = n.content;\r\n      this.note.editTime = n.editTime;\r\n      this.note.isPublic = n.isPublic;\r\n\r\n      //[BUG] [Vue warn]: Duplicate keys detected: '\"'. This may cause an update error.  found in  ---> <NoteList> at .\r\n      //有错，但是能运行???\r\n      // this.noteTags = n.tag\r\n    },\r\n\r\n    pushNote(isPublic = false) {\r\n      console.log(isPublic);\r\n      this.note.uId = this.loginUser.id\r\n      let date = new Date();\r\n      this.note.editTime = date.toLocaleString();\r\n      this.note.isPublic = isPublic\r\n      this.note.tag = JSON.stringify(this.noteTags);\r\n      axios({ method: 'POST', url: '/note/push', data: this.note }).then(rsp => {\r\n        if (rsp.data.success) {\r\n          console.log(rsp.data.data)\r\n          this.$message({ message: '保存成功', type: 'success' })\r\n          //收起该组件\r\n          this.$bus.$emit('handleSetEditorVisible', false)\r\n          this.$bus.$emit('getNotes');\r\n          this.$bus.$emit('getMyNotes')\r\n\r\n        }\r\n      }, err => { this.$message.error(err.message) }).finally(() => {\r\n        // this.note.tag = \r\n      })\r\n    },\r\n\r\n    generateNoteId() {\r\n      const nanoid = customAlphabet('0123456789', 6) //挂载时随机生成笔记编号\r\n      this.note.nId = nanoid();\r\n    },\r\n\r\n    setLoginUser() {\r\n      this.loginUser = this.getCookie('loginUser')\r\n    },\r\n    setCookie(key, value) {\r\n      Cookies.set(key, JSON.stringify(value))\r\n    },\r\n    getCookie(key) {\r\n      let cookieValue = Cookies.get(key)\r\n      if (cookieValue == undefined) {\r\n        return null //cookie未定义\r\n      }\r\n      return JSON.parse(Cookies.get(key))\r\n    },\r\n\r\n  },\r\n  created() { },\r\n  mounted() {\r\n    this.setLoginUser()\r\n    this.generateNoteId()\r\n    this.note.tag = ''\r\n    this.$bus.$on('handleSetNote', this.handleSetNote)\r\n    // console.log(this.note);\r\n    // const markdownIt = mavonEditor.getMarkdownIt()\r\n    // markdownIt.set({ break: false })\r\n\r\n  },\r\n  beforeDestroy() {\r\n    this.$bus.$off('handleSetNote')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.md-container {\r\n  border: 1px solid rgb(229, 233, 248);\r\n  height: 50vh;\r\n  overflow: hidden scroll;\r\n  margin-top: 10px;\r\n}\r\n\r\n.md {\r\n  height: 50vh;\r\n}\r\n\r\n.select-tag {\r\n  width: 20vw;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}