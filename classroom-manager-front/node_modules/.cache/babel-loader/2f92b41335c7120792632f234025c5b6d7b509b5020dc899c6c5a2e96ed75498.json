{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cookies from 'js-cookie';\nimport ChatInput from './ChatInput.vue';\nimport ChatUser from './ChatUser.vue';\nvar webSocket;\nlet webSocketUrl = 'ws://localhost:8080/ws/';\n// let webSocketUrl = 'ws://'+window.location.hostname+':8080/ws/'\n\nexport default {\n  components: {\n    ChatInput,\n    ChatUser\n  },\n  props: {},\n  data() {\n    return {\n      isOnLine: false,\n      chatMsg: [],\n      onLineUsers: [],\n      loginUser: null\n    };\n  },\n  watch: {},\n  computed: {},\n  methods: {\n    initData() {\n      if (this.loginUser == null) {\n        this.$message(\"请先登录后在使用该功能\");\n        return;\n      }\n      if ('WebSocket' in window) {\n        webSocketUrl = webSocketUrl + this.loginUser.id;\n        if (webSocket != null) {\n          webSocket.close();\n          webSocket = null;\n        }\n        webSocket = new WebSocket(webSocketUrl);\n      } else {\n        console.log(\"Not support WebSocket\");\n      }\n      webSocket.onopen = function () {\n        console.log(\"onOpen\");\n      };\n      webSocket.onclose = function () {\n        webSocket.close();\n        console.log('close');\n      };\n      webSocket.onmessage = e => {\n        console.log('收到消息：' + e.data);\n        // console.log(this) //写成匿名函数的this是vue  如果写成function形式，则this是websocket\n        let msgjson = JSON.parse(e.data);\n        if (!msgjson.hasOwnProperty('users')) {\n          this.chatMsg.push(msgjson); //如果不是传来的用户列表信息则是聊天信息，将聊天信息添加到数组中\n          this.$bus.$emit('handleReceive', this.chatMsg);\n        } else {\n          this.$bus.$emit('getUserList', msgjson.users);\n        }\n      };\n      webSocket.onerror = function () {\n        console.log('onError');\n      };\n    },\n    handleOnLine() {\n      // this.isOnLine = !this.isOnLine\n      console.log(this.isOnLine);\n      if (this.isOnLine) {\n        webSocket.onopen();\n      } else {\n        webSocket.close();\n      }\n    },\n    handleSendMsg(sendMsg) {\n      webSocket.send(JSON.stringify(sendMsg));\n    },\n    onMessage(data) {\n      console.log(data);\n    },\n    setLoginUser() {\n      this.loginUser = this.getCookie('loginUser');\n    },\n    setCookie(key, value) {\n      Cookies.set(key, JSON.stringify(value));\n    },\n    getCookie(key) {\n      let cookieValue = Cookies.get(key);\n      if (cookieValue == undefined) {\n        return null; //cookie未定义\n      }\n\n      return JSON.parse(Cookies.get(key));\n    }\n  },\n  created() {},\n  mounted() {\n    this.setLoginUser();\n    this.initData();\n    this.$bus.$on('handleSendMsg', this.handleSendMsg);\n    this.$bus.$emit('setLoginUser', this.loginUser);\n  },\n  beforeDestroy() {\n    this.$bus.$off('handleSendMsg');\n  }\n};","map":{"version":3,"mappings":";AAgBA;AACA;AACA;AAGA;AACA;AACA;;AAGA;EACAA;IACAC;IACAC;EAEA;EACAC;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;EACAC;EACAC;IACAC;MACA;QACA;QACA;MACA;MACA;QACAC;QACA;UACAC;UACAA;QACA;QACAA;MACA;QACAC;MACA;MACAD;QACAC;MACA;MACAD;QACAA;QACAC;MACA;MAEAD;QACAC;QACA;QACA;QACA;UACA;UACA;QACA;UAEA;QACA;MAEA;MACAD;QACAC;MACA;IACA;IAEAC;MACA;MACAD;MACA;QACAD;MACA;QACAA;MACA;IACA;IACAG;MACAH;IACA;IACAI;MACAH;IACA;IAEAI;MACA;IACA;IACAC;MACAC;IACA;IACAC;MACA;MACA;QACA;MACA;;MACA;IACA;EAEA;EACAC;EACAC;IACA;IACA;IACA;IACA;EACA;EACAC;IACA;EACA;AACA","names":["components","ChatInput","ChatUser","props","data","isOnLine","chatMsg","onLineUsers","loginUser","watch","computed","methods","initData","webSocketUrl","webSocket","console","handleOnLine","handleSendMsg","onMessage","setLoginUser","setCookie","Cookies","getCookie","created","mounted","beforeDestroy"],"sourceRoot":"src/components/ChatRoom","sources":["ChatRoom.vue"],"sourcesContent":["<template>\r\n  <el-main>\r\n    <!-- <h2>聊天室</h2> -->\r\n    <!-- <el-switch v-model=\"isOnLine\" active-text=\"进入聊天室\" @change=\"handleOnLine\" active-color=\"#13ce66\"\r\n      inactive-color=\"#ff4949\">\r\n    </el-switch> -->\r\n    <span>聊天室</span>\r\n    <br><br>\r\n    <div class=\"chat-box\">\r\n      <ChatInput chatMsg=\"chatMsg\"></ChatInput>\r\n      <ChatUser></ChatUser>\r\n    </div>\r\n  </el-main>\r\n</template>\r\n\r\n<script>\r\nimport Cookies from 'js-cookie'\r\nimport ChatInput from './ChatInput.vue';\r\nimport ChatUser from './ChatUser.vue';\r\n\r\n\r\nvar webSocket;\r\nlet webSocketUrl = 'ws://localhost:8080/ws/'\r\n// let webSocketUrl = 'ws://'+window.location.hostname+':8080/ws/'\r\n\r\n\r\nexport default {\r\n  components: {\r\n    ChatInput,\r\n    ChatUser,\r\n\r\n  },\r\n  props: {},\r\n  data() {\r\n    return {\r\n      isOnLine: false,\r\n      chatMsg: [],\r\n      onLineUsers: [],\r\n      loginUser: null,\r\n    };\r\n  },\r\n  watch: {},\r\n  computed: {},\r\n  methods: {\r\n    initData() {\r\n      if (this.loginUser == null) {\r\n        this.$message(\"请先登录后在使用该功能\")\r\n        return\r\n      }\r\n      if ('WebSocket' in window) {\r\n        webSocketUrl = webSocketUrl + this.loginUser.id\r\n        if (webSocket != null) {\r\n          webSocket.close();\r\n          webSocket = null;\r\n        }\r\n        webSocket = new WebSocket(webSocketUrl)\r\n      } else {\r\n        console.log(\"Not support WebSocket\");\r\n      }\r\n      webSocket.onopen = function () {\r\n        console.log(\"onOpen\");\r\n      }\r\n      webSocket.onclose = function () {\r\n        webSocket.close()\r\n        console.log('close');\r\n      };\r\n\r\n      webSocket.onmessage = (e) => {\r\n        console.log('收到消息：' + e.data);\r\n        // console.log(this) //写成匿名函数的this是vue  如果写成function形式，则this是websocket\r\n        let msgjson = JSON.parse(e.data);\r\n        if (!msgjson.hasOwnProperty('users')) {\r\n          this.chatMsg.push(msgjson) //如果不是传来的用户列表信息则是聊天信息，将聊天信息添加到数组中\r\n          this.$bus.$emit('handleReceive', this.chatMsg)\r\n        }else{\r\n\r\n          this.$bus.$emit('getUserList',msgjson.users)  \r\n        }\r\n\r\n      }\r\n      webSocket.onerror = function () {\r\n        console.log('onError');\r\n      }\r\n    },\r\n\r\n    handleOnLine() {\r\n      // this.isOnLine = !this.isOnLine\r\n      console.log(this.isOnLine);\r\n      if (this.isOnLine) {\r\n        webSocket.onopen()\r\n      } else {\r\n        webSocket.close()\r\n      }\r\n    },\r\n    handleSendMsg(sendMsg) {\r\n      webSocket.send(JSON.stringify(sendMsg))\r\n    },\r\n    onMessage(data) {\r\n      console.log(data)\r\n    },\r\n\r\n    setLoginUser() {\r\n      this.loginUser = this.getCookie('loginUser')\r\n    },\r\n    setCookie(key, value) {\r\n      Cookies.set(key, JSON.stringify(value))\r\n    },\r\n    getCookie(key) {\r\n      let cookieValue = Cookies.get(key)\r\n      if (cookieValue == undefined) {\r\n        return null //cookie未定义\r\n      }\r\n      return JSON.parse(Cookies.get(key))\r\n    },\r\n\r\n  },\r\n  created() { },\r\n  mounted() {\r\n    this.setLoginUser()\r\n    this.initData()\r\n    this.$bus.$on('handleSendMsg', this.handleSendMsg)\r\n    this.$bus.$emit('setLoginUser',this.loginUser)\r\n  },\r\n  beforeDestroy() {\r\n    this.$bus.$off('handleSendMsg')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-box {\r\n  display: flex;\r\n  justify-content: start;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}