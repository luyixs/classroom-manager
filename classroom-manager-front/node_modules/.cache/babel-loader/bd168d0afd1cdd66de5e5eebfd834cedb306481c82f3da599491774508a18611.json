{"ast":null,"code":"import { nanoid } from 'nanoid';\nvar webSocket;\nlet webSocketUrl = 'ws://localhost:8080/ws/';\nexport default {\n  components: {},\n  props: {},\n  data() {\n    return {\n      msg: '',\n      name: '',\n      reviveMsg: ''\n    };\n  },\n  watch: {},\n  computed: {},\n  methods: {\n    initData() {\n      // console.log(this)\n      this.name = nanoid(3);\n      if ('WebSocket' in window) {\n        webSocketUrl = webSocketUrl + this.name;\n        if (webSocket != null) {\n          webSocket.close();\n          webSocket = null;\n        }\n        webSocket = new WebSocket(webSocketUrl);\n      } else {\n        console.log(\"Not support WebSocket\");\n      }\n      webSocket.onopen = function () {\n        console.log(\"onOpen\");\n      };\n      webSocket.onclose = function () {\n        webSocket.close();\n        console.log('close');\n        console.log(webSocket);\n      };\n      webSocket.onmessage = function (e) {\n        console.log('收到消息：' + e.data);\n        if (typeof e.data === String) {\n          console.log(\"Received data string\");\n        }\n        if (e.data instanceof ArrayBuffer) {\n          var buffer = e.data;\n          console.log(\"Received arraybuffer\");\n        }\n      };\n      webSocket.onerror = function () {\n        console.log('onError');\n      };\n      console.log(webSocket);\n    },\n    handleSendMsg() {\n      webSocket.send(this.msg);\n    },\n    handleCloseSocket() {\n      webSocket.close();\n    }\n    // onOpen(){\n    //   console.log('onOpen')\n    // },\n    // onClose(){\n    //   console.log('onClose');\n    // },\n    // onMessage(message){\n    //   console.log('收到消息',message);\n    //   this.reviveMsg=message\n    // },\n    // onError(){\n    //   console.log('onError');\n    // }\n  },\n\n  created() {},\n  mounted() {\n    this.initData();\n  }\n};","map":{"version":3,"mappings":"AAWA;AAEA;AACA;AAEA;EACAA;EACAC;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;EACAC;EACAC;IACAC;MACA;MACA;MACA;QACAC;QACA;UACAC;UACAA;QACA;QACAA;MACA;QACAC;MACA;MACAD;QACAC;MACA;MACAD;QACAA;QACAC;QACAA;MACA;MACAD;QACAC;QACA;UACAA;QACA;QACA;UACA;UACAA;QACA;MACA;MACAD;QACAC;MACA;MAEAA;IACA;IAEAC;MACAF;IACA;IACAG;MACAH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;;EACAI;EACAC;IACA;EACA;AACA","names":["components","props","data","msg","name","reviveMsg","watch","computed","methods","initData","webSocketUrl","webSocket","console","handleSendMsg","handleCloseSocket","created","mounted"],"sourceRoot":"src/components","sources":["Chat.vue"],"sourcesContent":["<template>\r\n  <div class=\"\">\r\n    <h3>{{ name }}</h3>\r\n    <input type=\"text\" v-model=\"msg\">\r\n    <button @click=\"handleSendMsg\">Send</button>\r\n    <button @click=\"handleCloseSocket\">Close</button>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { nanoid } from 'nanoid';\r\n\r\nvar webSocket;\r\nlet webSocketUrl = 'ws://localhost:8080/ws/'\r\n\r\nexport default {\r\n  components: {},\r\n  props: {},\r\n  data() {\r\n    return {\r\n      msg: '',\r\n      name: '',\r\n      reviveMsg: '',\r\n    };\r\n  },\r\n  watch: {},\r\n  computed: {},\r\n  methods: {\r\n    initData() {\r\n      // console.log(this)\r\n      this.name = nanoid(3)\r\n      if ('WebSocket' in window) {\r\n        webSocketUrl = webSocketUrl + this.name\r\n        if (webSocket != null) {\r\n          webSocket.close();\r\n          webSocket = null;\r\n        }\r\n        webSocket = new WebSocket(webSocketUrl)\r\n      } else {\r\n        console.log(\"Not support WebSocket\");\r\n      }\r\n      webSocket.onopen = function () {\r\n        console.log(\"onOpen\");\r\n      }\r\n      webSocket.onclose = function () {\r\n        webSocket.close()\r\n        console.log('close');\r\n        console.log(webSocket)\r\n      };\r\n      webSocket.onmessage = function (e) {\r\n        console.log('收到消息：' + e.data);\r\n        if (typeof e.data === String) {\r\n          console.log(\"Received data string\");\r\n        }\r\n        if (e.data instanceof ArrayBuffer) {\r\n          var buffer = e.data;\r\n          console.log(\"Received arraybuffer\");\r\n        }\r\n      }\r\n      webSocket.onerror = function () {\r\n        console.log('onError');\r\n      }\r\n\r\n      console.log(webSocket)\r\n    },\r\n\r\n    handleSendMsg() {\r\n      webSocket.send(this.msg)\r\n    },\r\n    handleCloseSocket() {\r\n      webSocket.close()\r\n    }\r\n    // onOpen(){\r\n    //   console.log('onOpen')\r\n    // },\r\n    // onClose(){\r\n    //   console.log('onClose');\r\n    // },\r\n    // onMessage(message){\r\n    //   console.log('收到消息',message);\r\n    //   this.reviveMsg=message\r\n    // },\r\n    // onError(){\r\n    //   console.log('onError');\r\n    // }\r\n  },\r\n  created() { },\r\n  mounted() {\r\n    this.initData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n\r\n\r\n\r\n<!-- \r\n后端onOpen发送信息格式 {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\r\n\r\n后端onMessage收到的信息格式 {\"to\": \"admin\", \"text\": \"聊天文本\"}\r\n\r\n后端onMessage发送的信息格式 {\"from\": \"zhang\", \"text\": \"hello\"}\r\n\r\nJSONUtil.paseObj(jsonstr) 将json字符串转换为 JSONObject\r\njsonobj.getStr(keystr) 从jsonobj中获取key的value值\r\njsonobj.set(key,value) 设置jsonobj的key和value 返回jsonobj\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}